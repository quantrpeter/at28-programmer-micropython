import ssd1306
import machine

i2c=machine.I2C(1)
display = ssd1306.SSD1306_I2C(128, 64, i2c)
display.fill(0)
display.text("AT28 Programmer", 5, 5, 1)

# Simple 16x16 bitmap font for "V", "1", ".", "0"
big_font = {
    "V": [
        "10000001",
        "10000001",
        "10000001",
        "10000001",
        "01000010",
        "01000010",
        "01000010",
        "01000010",
        "00100100",
        "00100100",
        "00100100",
        "00011000",
        "00011000",
        "00011000",
        "00000000",
        "00000000",
    ],
    "1": [
        "00011000",
        "00111000",
        "01111000",
        "00011000",
        "00011000",
        "00011000",
        "00011000",
        "00011000",
        "00011000",
        "00011000",
        "00011000",
        "00011000",
        "01111110",
        "01111110",
        "00000000",
        "00000000",
    ],
    ".": [
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00000000",
        "00011000",
        "00011000",
        "00000000",
        "00000000",
        "00000000",
    ],
    "0": [
        "00111100",
        "01100110",
        "11000011",
        "11000011",
        "11000011",
        "11000011",
        "11000011",
        "11000011",
        "11000011",
        "11000011",
        "11000011",
        "01100110",
        "00111100",
        "00000000",
        "00000000",
        "00000000",
    ]
}

def draw_big_char(display, char, x, y):
    pattern = big_font.get(char)
    if not pattern:
        return
    for row, line in enumerate(pattern):
        for col, pixel in enumerate(line):
            if pixel == "1":
                display.pixel(x + col, y + row, 1)

# Draw "V1.0" in big font at (10, 30)
x = 30
for c in "V1.0":
    draw_big_char(display, c, x, 30)
    x += 18  # Space between characters

display.show()
